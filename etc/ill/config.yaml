# Copyright 2013,2014 PTFS Europe Ltd
#
# This file is part of Koha.
#
# Koha is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# Koha is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with Koha; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# This file creates a data structure defining valid item types and
# their fields for the British Library DSS InterLibrary Loan API.
#
# The first section defines fields for the various request field
# levels. For the BL API, each request can have information at the
# title, Item and Item of Interest levels.
#
# The second section defines the BL DSS API item types, and defines
# which of the fields defined in the first section are relevant for
# this item type.

# The 'record' data structure provides an overview of the xml records
# we are interested in receiving.  This structure is an abstract
# representation of the XML we receive from the API at the individual
# record level of the search results.
#
# Each indentation followed by the keywords 'go: true' reflect a level
# of nesting in the XML.  Each indentation followed by any other
# keywords is a value we're interested in storing in the database.

# FIXME: Name: Human-readable name: currently not used. Perhaps remove
# the property?
record:
  uin:
    name: British Library Identifier
  type:
    name: Material Type
  isAvailableImmediateley:
    name: Available now?
  metadata:
    go: true
    titleLevel:
      go: true
      title:
        name: Title
      author:
        name: Author
      identifier:
        name: Identifier
      publisher:
        name: Publisher
      issn:
        name: ISSN
      isbn:
        name: ISBN
      ismn:
        name: ISMN
      shelfmark:
        name: Shelfmark
      conferenceVenue:
        name: Conference Venue
      conferenceDate:
        name: Conference Date
      thesisUniversity:
        name: Thesis University
      thesisDissertation:
        name: Thesis Dissertation
      mapScale:
        name: Map Scale
    itemLevel:
      go: true
      year:
        name: Year
      volume:
        name: Volume Number
      issue:
        name: Issue Number
      part:
        name: Part Number
      edition:
        name: Edition
      season:
        name: Season
      month:
        name: Month
      day:
        name: Day
      specialIssue:
        name: Special Issue
    itemOfInterestLevel:
      go: true
      title:
        name: Title
      author:
        name: Author
      pages:
        name: Pages

# Method_maps defines what fields should be returned for each record
# received from the ILL API.  For each method name (e.g. getTitle),
# each word in the list specifies a level in the XML document to be
# traversed. For instance,
# getTitle:
#   - metadata
#   - titleLevel
#   - title
# tells the ILL module to look in 'record/metadata/titleLevel/title'
# for the title value in this record.
#
# getSummary is an exception. It's a 'meta-method' as such, you can
# specify names of other methods that you would like to use to build
# your result object (an array, with values within in the order of the
# methods specified).
#
# FIXME: problematic: no guarantee we have n values returned, or
# consistency in returns vis-a-vis OPAC implementation.
method_maps:
  getTitle:
    - metadata
    - titleLevel
    - title

  getAuthor:
    - metadata
    - titleLevel
    - author

  getIdentifier:
    - metadata
    - titleLevel
    - identifier

  getID:
    - uin

  getType:
    - type

  getSummary:
    - getID
    - getTitle
    - getAuthor
    - getType
    - getIdentifier
